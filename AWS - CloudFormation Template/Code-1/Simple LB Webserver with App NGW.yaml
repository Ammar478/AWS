AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates two Amazon EC2 instances and an Application Load Balancer, and loads a web app from GitHub.

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName

  MyInstanceType:
    Description: Instance type for the web servers
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  WebAppGitHubPath:
    Description: Please enter the GitHub URL to the web app source code
    Type: String
    Default: https://github.com/pneborg/globomantics/zipball/master

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for Public Subnet 1
    Type: String
    Default: 10.192.20.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for Public Subnet 2
    Type: String
    Default: 10.192.21.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for Private Subnet 1
    Type: String
    Default: 10.192.31.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for Private Subnet 2
    Type: String
    Default: 10.192.32.0/24

Mappings:
  RegionMap:
    us-east-1:
      "64": ami-0182f373e66f89c85
    us-east-2:
      "64": ami-0a0ad6b70e61be944
    eu-central-1:
      "64": ami-0f9cf947a29e274c7

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref MyInstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", '64']
      SubnetId: !Ref PrivateSubnet1  # Instance is in a VPC, so we use SecurityGroupIds, not SecurityGroups.
      SecurityGroupIds:  # Use SecurityGroupIds instead of groupName.
        - !Ref MySecurityGroup
      Tags:
        - Key: Name
          Value: WebServer1
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap
            yum install -y git
            git clone ${WebAppGitHubPath} /home/ec2-user/app
            cd /home/ec2-user/app
            npm install
            node server.js

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref MyInstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", '64']
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:  # Use SecurityGroupIds instead of groupName.
        - !Ref MySecurityGroup
      Tags:
        - Key: Name
          Value: WebServer2
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap
            yum install -y git
            git clone ${WebAppGitHubPath} /home/ec2-user/app
            cd /home/ec2-user/app
            npm install
            node server.js

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "myLoadBalancer"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref MySecurityGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80

Outputs:
  LoadBalancerUrl:
    Description: The URL of the Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName