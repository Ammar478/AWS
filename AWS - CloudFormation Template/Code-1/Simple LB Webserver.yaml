AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates two Amazon EC2 instances and an Application Load Balancer.

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the Application Load Balancer should be deployed to

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Choose at least 2 subnets (in different availability zones) for the Application Load Balancer

Resources:
  EC2Instance1:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            /home/ec2-user/public/index.html:
              content: |
                <html><head><title>EC2 Instance 1</title></head><body><h1>Hello World!!</h1></body></html>
            /home/ec2-user/package.json:
              content: |
                {
                  "name": "simple-app",
                  "version": "1.0.0",
                  "dependencies": {
                    "express": "^4.17.1"
                  }
                }
            /home/ec2-user/server.js:
              content: |
                var express = require('express');
                var app = express();
                var port = process.env.PORT || 80;
                app.use(express.static(__dirname + '/public'));
                app.listen(port, function() {
                  console.log('Server listening on port', port);
                });
          commands:
            NPMInstall:
              command: "npm install"
              cwd: "/home/ec2-user"
            RunWebServer:
              command: "node /home/ec2-user/server.js"
              cwd: "/home/ec2-user"
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-0182f373e66f89c85
      Tags:
        - Key: Name
          Value: Webserver1
      SecurityGroupIds:
        - !Ref MySecurityGroup
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap
            curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
            yum -y install nodejs
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance1

  EC2Instance2:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            /home/ec2-user/public/index.html:
              content: |
                <html><head><title>EC2 Instance 2</title></head><body><h1>Hello World!!</h1></body></html>
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      ImageId: ami-0182f373e66f89c85
      Tags:
        - Key: Name
          Value: Webserver2
      SecurityGroupIds:
        - !Ref MySecurityGroup
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap
            curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
            yum -y install nodejs
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance2

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets
      SecurityGroups:
        - !GetAtt MySecurityGroup.GroupId

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: my-target-group
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
      Matcher:
        HttpCode: '200'
      Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80

Outputs:
  SecurityGroup:
    Description: A reference to the Security Group
    Value: !Ref MySecurityGroup

  LoadBalancer:
    Description: The public DNS name of the Load Balancer
    Value: !Ref ApplicationLoadBalancer

  LoadBalancerUrl:
    Description: The URL of the Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  WebServer1Dns:
    Description: The public DNS name of Webserver1
    Value: !GetAtt 
      - EC2Instance1
      - PublicDnsName

  WebServer2Dns:
    Description: The public DNS name of Webserver2
    Value: !GetAtt 
      - EC2Instance2
      - PublicDnsName